g-->generate
c-->component
d-->directive
p-->pipes
s-->service
ng serve--> to run the application

ng new application name--> create the angular application
ng serve-->to run the application
ng g c  componentname-->to create the component
ng g d  directivename-->to create directive
ng g p pipename-->to create pipes
ng g servicename--> create services
ng build-->to build angular application
localhost:4200(see angular application)-> default by angular application
-->app.module.ts is the main class

binding--> Display the variable in html page
one way data binding-->ts to html
two way data binding-->html to ts and vice versa
form module in app.module to enable two way data binding and include it in imports
[(ngModel)] is angular attribute which enables two data binding

-->Directives
Default--> 
ngIf-->Hide or show the elements, *ngIf will show according to boolean expression provided
ngFor-->Iterating the elements and used only for array of objetcs. Normal objects are displayed directly by using binding
ngClass-> adding or removing the css classes for elements
ngModel--Two way data binding, just to show text 
-->HTTP api Integration
Import the httpClientModule in the app.module.ts
import HTTP client to component
Create object for the httpClient in the component
use object to implement get and post

---> services
Doesnot have UI interactions and can be accessed by across applications
ng g s servicename
---> Pipes(|) -->text transformation tools
Uppercasepipe--> 
currency

Creating our own pipe--> ng g p pipename


--->Sharing the data from  parent component  to child component
create a shared variable in the child component(in child.ts)
add the decorator(@Input, @Output for the variable)
add the 
create a varibale using decrator @ output()datashared =new EventEmiiter()(in child.ts)
this.datashared.emit("sample message")
sharing data between the components which are not related
add the variable in child component tag which is in parent component
-->Web Template Integration
